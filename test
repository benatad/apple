import requests
from datetime import datetime
import time
import random

def get_processing_times(form_type, service_center, form_category):
    
    url = f'https://egov.uscis.gov/processing-times/api/processingtime/{form_type}/{service_center}/{form_category}'
    headers = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4844.51 Safari/537.36',
        'Referer': 'https://egov.uscis.gov/processing-times/',
        'Accept': 'application/json, text/plain, */*',
        'Connection': 'keep-alive'
    }
    
    try:
        response = requests.get(url, headers=headers)
        
        if response.status_code == 200:
            print(f"Successfully retrieved processing times for {form_type}, {service_center}, {form_category} at {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}: {response.status_code}")
            return response.json()
        else:
            print(f"Failed to retrieve processing times for {form_type}, {service_center}, {form_category} at {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}: {response.status_code}")
            return None
    except requests.exceptions.HTTPError as http_err:
        print(f"HTTP error occurred: {http_err}")
    except requests.exceptions.ConnectionError as conn_err:
        print(f"Connection error occurred: {conn_err}")
    except requests.exceptions.Timeout as timeout_err:
        print(f"Timeout error occurred: {timeout_err}")
    except requests.exceptions.RequestException as req_err:
        print(f"An error occurred: {req_err}")
    return None

# 144-A = Application for a waiver of the 2-year foreign residence requirement based on exceptional hardship or persecution
# 144-D = Application for a waiver of the 2-year foreign residence requirement

form_service_center_mapping = {
    '144A': ['CSC'],
    '144D': ['ESC']
}

form_type = 'I-612'

all_processing_times = {}

# Get the current datetime and format it for last_refreshed
all_processing_times['last_refreshed'] = datetime.now().strftime('%b %d, %Y %I:%M %p')

for category, centers in form_service_center_mapping.items():
    for center in centers:
        data = get_processing_times(form_type, center, category)
        if data:
            key = f'{form_type}_{center}_{category}'
            all_processing_times[key] = data
        time.sleep(random.uniform(0, 1))

